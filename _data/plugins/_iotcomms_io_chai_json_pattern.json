{"_id":"@iotcomms.io/chai-json-pattern","_rev":"1-230f470e5e654827cddba3de7f539036","name":"@iotcomms.io/chai-json-pattern","dist-tags":{"latest":"1.0.0"},"versions":{"1.0.0":{"name":"@iotcomms.io/chai-json-pattern","version":"1.0.0","description":"Chai JSON pattern assertions","main":"dist/main.js","scripts":{"prepublish":"npm run build","build-parser":"pegjs -o ./src/parser/parser.js ./src/parser/parser.pegjs","prebuild":"npm run build-parser","build":"babel src/ -d dist/","lint":"eslint src/","lint-fix":"eslint src/ --fix","pretest":"npm run build-parser","test":"mocha --compilers js:babel-core/register tests/*"},"author":{"name":"Damian Szulc"},"repository":{"type":"git","url":"git+https://github.com/damian-brainhub/chai-json-pattern.git"},"keywords":["array","chai","chai-plugin","chai-json","chai-deep-match","cucumber","deep","deep-eql","deep-match","integration","JSON","matching","mocha","test"],"license":"MIT","bugs":{"url":"https://github.com/damian-brainhub/chai-json-pattern/issues"},"devDependencies":{"babel-cli":"^6.22.2","babel-core":"^6.25.0","babel-preset-latest":"^6.22.0","babel-preset-stage-0":"^6.22.0","chai":"^2.1.2","eslint":"^3.14.1","eslint-config-brainhub":"^1.0.0","mocha":"^2.2.1","pegjs":"^0.10.0"},"dependencies":{"lodash":"^4.17.4"},"gitHead":"91ceb729f3677d32d78e34f2be3054cf7cb27458","homepage":"https://github.com/damian-brainhub/chai-json-pattern#readme","_id":"@iotcomms.io/chai-json-pattern@1.0.0","_nodeVersion":"12.22.1","_npmVersion":"6.14.12","dist":{"integrity":"sha512-KDfXkYpaBfclLtGF7VfnHbRc1gIc3rJZK2ZmyRJaNuTl+5pHBuGTmiGpB8X1Gq6znv4uJ2cr03oBDdpGw3qnrQ==","shasum":"c6f67c343919c8cdadba17d669da15f6ce639c3e","tarball":"https://registry.npmjs.org/@iotcomms.io/chai-json-pattern/-/chai-json-pattern-1.0.0.tgz","fileCount":50,"unpackedSize":228267,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJg0ds9CRA9TVsSAnZWagAAXp0P/1Ksl4Q9n6RxdgctZwlK\ni7qIxNcqj8wnZ/04vjkRJQK81UFieZFZE73hgwaINb8EdUsPjdJIA17mftAr\n7BXkIZE0drkES2YaUiWl13ETqTR/EDNo75O0KfQPtmAYELMXBXMYuW2CdBqC\nUrs4r8AI0VQpcSHx9OsM07fiLqCy3WmcwbU0SHMuyEjR6kUimTzfzAvcYsOY\nJCXasRSyH9N9DSR42ddnrndhnT/R/jfRsUArqaTrdyC3RO2/uX1JwO0ZebAY\nGeVg30QXtOpum8+fFnsn641VGUN6IOl+lTwnBxJZGN+WPV6sK6SAVdcA/kq5\n6tFN4jmOoE53s3E4zCFVMgmQ81Da07tCKuC2W8mxTKlS8qvU0NpkptrhxXEn\n2Hpvj97oQKiNKmeNgXitmISWoNZzgFJzoW4F/TU95VGvpqcfYNBAnFbWiE9Z\nTgPLVQpxsoULgkGG2yrXtmS1c0NQ10463cSwG7eHaCfg6ThdYZs8p7ZfXQ84\nWZAEKaiJbzafMSDQlPk9QARwfJ5Zkya5osnxj9dBUbozxuN/MKg1uI7ce2Sx\nC7jLQDI3PowfZwnybrTM4p4+kRMVLypaM8xkDdmrh8++ffJFDqSveBwj5LRp\ndeVSyKPKVETmJDAhZP+0hOFQ+0he2lxgBCeKkvKSr9xjgATuq5xlRuAHMLOa\nd5vQ\r\n=SamA\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIHVLJ8Dxnwg7BIkV6e1DG2CoXAeuUZU4RGpf9WwrUfb0AiEAxUTJ0iw2wf0afH3OSuw4Lg6vZOChmWJY6kQeDvALsVA="}]},"_npmUser":{"name":"iotomms-oskar","email":"oskar@iotcomms.io"},"directories":{},"maintainers":[{"name":"iotomms-oskar","email":"oskar@iotcomms.io"},{"name":"iotcomms","email":"developers@iotcomms.io"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/chai-json-pattern_1.0.0_1624365884485_0.7791094435145454"},"_hasShrinkwrap":false}},"time":{"created":"2021-06-22T12:44:44.116Z","1.0.0":"2021-06-22T12:44:44.682Z","modified":"2022-04-05T21:04:10.710Z"},"maintainers":[{"name":"iotomms-oskar","email":"oskar@iotcomms.io"},{"name":"iotcomms","email":"developers@iotcomms.io"}],"description":"Chai JSON pattern assertions","homepage":"https://github.com/damian-brainhub/chai-json-pattern#readme","keywords":["array","chai","chai-plugin","chai-json","chai-deep-match","cucumber","deep","deep-eql","deep-match","integration","JSON","matching","mocha","test"],"repository":{"type":"git","url":"git+https://github.com/damian-brainhub/chai-json-pattern.git"},"author":{"name":"Damian Szulc"},"bugs":{"url":"https://github.com/damian-brainhub/chai-json-pattern/issues"},"license":"MIT","readme":"# Chai JSON Pattern\n> Deep matching objects with clear, JSON-like syntax.\n\n[![CircleCI](https://circleci.com/gh/damian-brainhub/chai-json-pattern/tree/master.svg?style=svg)](https://circleci.com/gh/damian-brainhub/chai-json-pattern/tree/master)\n\n# Introduction\nChai JSON pattern allows you to create *blueprints* for JavaScript objects to ensure *validation* of key information. It enables you to use JSON syntax extend with easy to use validators. It came up mostly for testing API with cucumber-js, but can be used in any application. Additionaly you can extend base functionality with custom validators. For more information see API reference.\n# API\nSee the detailed [API Reference](https://github.com/damian-brainhub/chai-json-pattern/blob/master/API.md).\n\n# Example\n\n```js\n\nconst pattern = `\n    {\n        \"username\": String AND alphanum AND minLength(3) AND maxLength(30),\n        \"password\": String AND regex(\"/^[0-9a-zA-Z]{5,30}$/\"),\n        \"access_token\"?: String AND Number,\n        \"birthyear\": Integer AND range(1900, 2017),\n        \"email\": String,\n        ...\n    }\n`;\n\nexpect(user).to.matchPattern(pattern);\n```\nThe above pattern require `user` to be an object with keys that satisfy following conditions:\n* `username`\n    * required string\n    * contain only alphanumeric characters\n    * must have at least 3 characters, and maximum 30\n* `password`\n    * required string\n    * must satisfy the custom regex\n* `access_token`\n    * optional string or number\n* `birthyear`\n    * required Integer between 1900 and 2017\n* `email`\n    * required string\n* allow another keys (e.g. createdAt, updateAt, etc.)\n\nIf `user` will not satisfy pattern, test will not pass, and you will see error with diff between `user` and pattern.\n\n# Usage\nUsage is a two steps process. First, you have to install `chai-json-pattern` package.\n```\nnpm install --save-dev chai-json-pattern\n```\nThen import `chaiJsonPattern` and use `matchPattern`:\n```js\nimport chai, { expect } from 'chai';\nimport chaiJsonPattern from 'chai-json-pattern';\n\nchai.use(chaiJsonPattern);\n\nexpect({ a: 2 }).to.matchPattern(`{\n    \"a\": Number AND range(0, 5),\n}`);\n```\n","readmeFilename":"README.md"}
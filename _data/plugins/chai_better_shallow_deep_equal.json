{"_id":"chai-better-shallow-deep-equal","name":"chai-better-shallow-deep-equal","dist-tags":{"latest":"0.1.0"},"versions":{"0.1.0":{"name":"chai-better-shallow-deep-equal","version":"0.1.0","description":"Chai shallowDeepEqual replacement that wraps Unexpected","main":"lib/chai-better-shallow-deep-equal.js","scripts":{"coverage":"nyc --reporter=lcov --reporter=text mocha","lint":"eslint . && prettier --check '**/*.js'","test":"mocha"},"keywords":["chai","chai-plugin","objects","assertions","testing","shallow","deep"],"author":{"name":"Alex J Burke","email":"alex@alexjeffburke.com"},"repository":{"type":"git","url":"git+https://github.com/alexjeffburke/chai-better-shallow-deep-equal.git"},"license":"MIT","dependencies":{"unexpected":"^11.13.0"},"devDependencies":{"chai":"^4.2.0","coveralls":"^3.0.9","eslint":"^6.8.0","eslint-config-prettier":"^6.10.0","eslint-config-standard":"^14.1.0","eslint-plugin-import":"^2.20.1","eslint-plugin-mocha":"^6.3.0","eslint-plugin-node":"^11.0.0","eslint-plugin-promise":"^4.2.1","eslint-plugin-standard":"^4.0.1","mocha":"^7.1.0","nyc":"^15.0.0","prettier":"^1.19.1","unexpected-snapshot":"^1.0.0"},"gitHead":"8a603af753b50dcad9602ecaed0acd1f7e77d1cf","bugs":{"url":"https://github.com/alexjeffburke/chai-better-shallow-deep-equal/issues"},"homepage":"https://github.com/alexjeffburke/chai-better-shallow-deep-equal#readme","_id":"chai-better-shallow-deep-equal@0.1.0","_nodeVersion":"10.19.0","_npmVersion":"6.13.4","dist":{"integrity":"sha512-8qVUP7gsvc4L6HTd4SQ8GOPHbGAXqyPNq4n0PwjbYHfTY0XLqqCPpOPFyMhWB30+zIt0ux551E/KFI7eVasQTQ==","shasum":"a13f7f555494dfee3266cd2a8ae7ba27dc0b4941","tarball":"https://registry.npmjs.org/chai-better-shallow-deep-equal/-/chai-better-shallow-deep-equal-0.1.0.tgz","fileCount":4,"unpackedSize":7200,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJeap8QCRA9TVsSAnZWagAAhlAP/0TUsA2z3W3DQ1RRQl7M\njyJpmOXgDm8huPJJccP3JSqVwtZeC334JsuOv+rC9xZD00wzxXdo5t4ZZtaq\n9Gy+dXhRZVApkQqDQ2FP1WWTbBQ3AXMmn+jlCxXOP3DKqm+CTVhAJKBDKWfl\nRmO9awFwMxq+BZNt303p+Xc/5T8Qi+70l/pBLSgs/kAH8Qlm2Gwd4fsnjVCR\n0CWIV2SLZRugkuteXwTaqAxfeWZKsHE9rNTUG5JubrlR2xVarGhRxuJq/JTj\n1rBibTN5VPjek5rrndvGpCm259eydCk3y17csl+z4LZ+eJlzlAEGmqcPH+Aq\nDW38it0SWiFkYD4lgxCGzcfnopBrdY1kI6KpWV5+8cX80cig+o+9ToW1diw6\nyFEfh4CMIGVkIT9Rwp9P6AkrIPya93DhfpvbPfoy/fKdGnjo2luw22HU+daE\nTtOImJ68UnORqZT8A7s4CK1imVdM24UWI5FDPk9vLMM1TCW1yNu+7hSQri+J\nCXqhJ52zSLRDl/rH3kyv/KXe4q99UOWUun01tNY+1Jchv7Uay06vAmz0RwVO\nu/QswY8AcZ3OqY0rWFvrPxPPjSxdonyLbdz6ZRpWOfmEg1M8YgPNfYq0lPod\nGeged9RbwRgtjTH24SYAZHhWgGYEreinq4ZrQB6kU6XD57c4f9x5hUyptuxc\nOKIC\r\n=6LGW\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"name":"alexjeffburke","email":"alex@alexjeffburke.com"}],"_npmUser":{"name":"alexjeffburke","email":"alex@alexjeffburke.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/chai-better-shallow-deep-equal_0.1.0_1584045840449_0.6696779166281432"},"_hasShrinkwrap":false}},"time":{"created":"2020-03-12T20:44:00.448Z","0.1.0":"2020-03-12T20:44:00.602Z","modified":"2020-03-12T20:44:03.189Z"},"maintainers":[{"name":"alexjeffburke","email":"alex@alexjeffburke.com"}],"description":"Chai shallowDeepEqual replacement that wraps Unexpected","homepage":"https://github.com/alexjeffburke/chai-better-shallow-deep-equal#readme","keywords":["chai","chai-plugin","objects","assertions","testing","shallow","deep"],"repository":{"type":"git","url":"git+https://github.com/alexjeffburke/chai-better-shallow-deep-equal.git"},"author":{"name":"Alex J Burke","email":"alex@alexjeffburke.com"},"bugs":{"url":"https://github.com/alexjeffburke/chai-better-shallow-deep-equal/issues"},"license":"MIT","readme":"# (Better) Chai Shallow Deep Equal plugin\n\nThis module provides a drop-in replacement `shallowDeepEqual`\nassertion for [chai](https://www.chaijs.com) that uses strict\nsemantics and an intuitive output diff.\n\n[![NPM version](https://img.shields.io/npm/v/chai-better-shallow-deep-equal.svg)](https://www.npmjs.com/package/chai-better-shallow-deep-equal)\n[![Build Status](https://img.shields.io/travis/alexjeffburke/chai-better-shallow-deep-equal/master.svg)](https://travis-ci.org/alexjeffburke/chai-better-shallow-deep-equal)\n[![Coverage Status](https://img.shields.io/coveralls/alexjeffburke/chai-better-shallow-deep-equal/master.svg)](https://coveralls.io/r/alexjeffburke/chai-better-shallow-deep-equal?branch=master)\n\nUnder the hood the library wraps the [Unexpected](https://unexpected.js.org)\nlibrary, specifically making use of the structural\n[\"to satisfy\"](https://unexpected.js.org/assertions/any/to-satisfy/) assertion.\n\n## Use\n\nOnce installed the plugin can be simply imported and used as a plugin:\n\n```js\nconst chai = require(\"chai\");\nconst chaiExpect = chai.expect;\n\nchai.use(require(\"chai-better-shallow-deep-equal\"));\n\nchaiExpect({ foo: true, bar: 1 }).to.shallowDeepEqual({ foo: true });\n```\n\n## Customisation\n\n### Adding types\n\nSometimes it can be beneficial to identify certain types within\nthe test suite - perhaps to customise their display or to treat\nthem otherwise differently. This can be achieved by using the\n`addType()` API:\n\n```js\nconst chaiBetterShallowDeepEqual = require(\"chai-better-shallow-deep-equal\");\n\nchaiBetterShallowDeepEqual.addType({\n  name: \"CustomDate\",\n  base: \"date\",\n  identify: obj => obj && obj._isCustomDate\n});\n```\n\nIn the example above, we are trying to single out certain objects\nthat occur within a hypthetical test suite that use custom dates\nby checking whether they have an \"isCustomDate\" property.\n\nGiven our definition of the `identify()` method above, when the\nplugin encounters such objects it will think of them as `CustomDate`\nand be aware that they extend the behavior of the builtin date type.\n\nThis API accepts the same options as the Unexpected\n[addType()](https://unexpected.js.org/api/addType/) method.\nPlease consult the link for more detailed description.\n\n### Custom Matching\n\nWith the availablity of custom types are in the picture, one common\ndesire is to allow customising the way those identified types are\nmatched.\n\nBy default only alike types are compared, but suppose that within\nour tests we want to allow comparing any `CustomDate` object against\na, ISO time string.\n\nLet's stick with the exmaple from our earlier hypothetical - we can\ndefine allowing the comparison using the `addMatch()` API:\n\n```js\nchaiBetterShallowDeepEqual.addMatch({\n  leftType: \"date\",\n  rightType: \"string\",\n  handler: (lhs, rhs) => [lhs.toISOString(), rhs]\n});\n```\n\nWhat we've defined here is when we see a `CustomDate` being compared\nto a string, to instead first convert it to an ISO string and then do\nthe comparison. In the test suite, the effect is to allow expecations\nto be defined in a way that is much more easily read:\n\n```js\nconst fooDate = new Date(1583947016326);\n\nchaiExpect({ fooDate }).to.shallowDeepEqual({\n  fooDate: \"2020-03-11T17:16:56.326Z\"\n});\n```\n","readmeFilename":"README.md"}